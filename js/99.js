window.modules["99"] = [function(require,module,exports){'use strict';

var _get = require(32),
    DomParser = require(100),
    parser = new DomParser(),
    NAME_DATE_REGEX = /(.+)\s+\[([0-9]+:[0-9]+\s+(?:AM|PM))\]/g,
    HANDLES = ['ben.hart', 'chasdanner', 'davidwallacewells', 'edkilgore', 'eklevitz', 'ezekiel', 'feldman', 'gabriel.debenedetti', 'graham', 'jake.swearingen', 'jonathanchait', 'madisonmk', 'margaret.hartmann', 'maxread', 'olivianuzzi', 'sarah.jones'],
    DISPLAY_NAME_TO_HANDLE_MAP = {
  'Benjamin Hart': 'ben.hart',
  'Chas Danner': 'chasdanner',
  'David Wallace-Wells': 'davidwallacewells',
  'Ed Kilgore': 'edkilgore',
  'Eric Levitz': 'eklevitz',
  'Ezekiel Kweku': 'ezekiel',
  'Brian Feldman': 'feldman',
  'Gabe Debenedetti': 'gabriel.debenedetti',
  'graham starr': 'graham',
  'Jake Swearingen': 'jake.swearingen',
  'Jonathan Chait': 'jonathanchait',
  'Madison Malone Kircher': 'madisonmk',
  'Margaret Hartmann': 'margaret.hartmann',
  'Max Read': 'maxread',
  'Olivia Nuzzi': 'olivianuzzi'
},
    DISPLAY_NAME_TO_SANITIZED_DISPLAY_NAME_MAP = {
  'Madison Malone Kircher (she/her)': 'Madison Malone Kircher'
},
    MAX_DEFAULTS = 3;

var DEFAULT_HANDLES = [];

function sanitizeDisplayName(displayName) {
  return _get(DISPLAY_NAME_TO_SANITIZED_DISPLAY_NAME_MAP, displayName, displayName);
}

function getHandleForUser(user) {
  if (HANDLES.includes(user)) {
    return user;
  } else if (HANDLES.includes(_get(DISPLAY_NAME_TO_HANDLE_MAP, user))) {
    return _get(DISPLAY_NAME_TO_HANDLE_MAP, user);
  } else {
    var defaultIndex = DEFAULT_HANDLES.indexOf(user);

    if (defaultIndex > -1) {
      return "default_".concat(defaultIndex + 1);
    }

    if (DEFAULT_HANDLES.length < MAX_DEFAULTS) {
      DEFAULT_HANDLES.push(user);
      return "default_".concat(DEFAULT_HANDLES.length);
    }

    return 'default';
  }
} // We expect quillHTML to be a series of slack chat messages of the format:
// <p>username [timestamp]</p>
// <p>message</p>
// <p><br/></p>
// <p>username [timestamp]</p>
// <p>message</p>
// <p>message</p>
// <p><br/></p>
// <p>username [timestamp]</p>
// <p>message</p>
// <p><br/></p>
// 
// As generated by clay-kiln's multi-line wysiwyg input from:
// username [timestamp]
// message
// 
// username [timestamp]
// message
// message
// 
// username [timestamp]
// message


function captureSlackContent(quillHTML) {
  var chat = parser.parseFromString(quillHTML);
  var paragraphs, paragraphsArray, nameDateRegexMatch, user, handle, time;

  if (typeof chat === 'undefined') {
    return [];
  }

  paragraphs = chat.getElementsByTagName('p');
  paragraphsArray = [].slice.call(paragraphs);
  return paragraphsArray.reduce(function (accumulator, currentParagraph) {
    nameDateRegexMatch = NAME_DATE_REGEX.exec(currentParagraph.textContent);

    if (nameDateRegexMatch) {
      user = sanitizeDisplayName(nameDateRegexMatch[1]);
      handle = getHandleForUser(user);
      time = nameDateRegexMatch[2]; // new user!

      accumulator.push({
        user: user,
        handle: handle,
        time: time,
        content: '',
        messageCount: 0
      });
    } else if (currentParagraph.textContent) {
      // this will skip blank lines containing <br/> tags
      // the editor pasted a slack chat where the first line was NOT a username/timestamp combo
      if (!accumulator.length) {
        accumulator.push({
          content: '',
          messageCount: 0
        });
      } // push the html of this paragraph (including containing tags) to the latest user's content


      if (currentParagraph.textContent.trim().length > 0) {
        accumulator[accumulator.length - 1].content += currentParagraph.outerHTML;
        accumulator[accumulator.length - 1].messageCount += 1;
      }
    }

    return accumulator;
  }, []);
}

module.exports.slack = captureSlackContent;
}, {"32":32,"100":100}];
