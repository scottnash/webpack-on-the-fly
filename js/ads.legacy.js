window.modules["ads.legacy"] = [function(require,module,exports){'use strict';

var _map = require(37),
    _forEach = require(27),
    _isString = require(164),
    _remove = require(216),
    _find = require(71),
    _isEqual = require(167),
    _each = require(213),
    _debounce = require(107),
    _sortBy = require(102),
    page = require(116),
    visit = require(31);

DS.service('adService', ['Eventify', '$cid', '$document', '$window', function (Eventify, $cid, $document, $window) {
  // hashmaps of ad data (generated from elements when instantiated) and slots (generated by googletags)
  // format is units: { 'ad-id': { data: { generated from new AdInstance() }, slot: { generated from loadIndividualAd() } } }
  var units = {},
      adService = this,
      loadIndividualAd,
      AdInstance,
      refreshAd,
      loadAd,
      pageLoadQueue = [],
      executePageLoadQueue,
      queryObject = visit.getQueryParamsObject(['utm_campaign']),
      googletag; // instantiate these variables immediately for ad performance tracking with GTM.
  // Looking to capture times of this file loading and first ad on page load.
  // This is a temporary measurement to have a baseline measurement for prebid on lazy loaded ads.

  $window.NYM = {};
  $window.NYM.analytics = {};
  $window.NYM.analytics.adStartTime = $window.performance.now(); // instantiate this early, so we can load the gpt js asynchronously
  // googletag.cmd = googletag.cmd || [];
  // googletag.cmd is an empty JS array of ads

  $window.googletag = $window.googletag || {}, $window.googletag.cmd = $window.googletag.cmd || [];
  googletag = $window.googletag;

  if (window.apstag) {
    window.apstag.cleared = true;
    disableInitialLoadAndMakeA9Request();
  } // utility function to load ads. returns the full adData w/ slot added


  loadIndividualAd = function loadIndividualAd(ad) {
    var slot,
        adCount,
        adData = ad.data,
        adUnits = [];

    if (!adData.loaded) {
      // Load ad.
      adData.loaded = true; // If the ad has no size attribute, it's probably an out of page interstitial.

      slot = null;

      if (!adData.sizes) {
        // GPT defineOutOfPageSlot which constructs ad slot as 1x1 (the out of page ad slot)
        slot = googletag.defineOutOfPageSlot(adData.name, adData.id).addService(googletag.pubads());
      } else {
        // GPT defineSlot which constructs ad slot with given data and associates it with div with the specific adData.id
        slot = googletag.defineSlot(adData.name, adData.sizes, adData.id).addService(googletag.pubads());
      } // GPT setTargeting based on the adId


      slot.setTargeting('adid', adData.id); // add UTM campaign keyword for targeting
      // GPT setTargeting based UTM - can call setTargeting multiple times for the same slot without overriding as long as the key (the first argument) is unique

      if (queryObject.hasOwnProperty('utm_campaign')) {
        slot.setTargeting('utmcamp', queryObject.utm_campaign);
      } // set label for MOAT purposes - includes label property of ad (with site appended- done in the template), count of number of this ad on specific page, and site name


      adCount = adService.getAdCount(adData.label);
      slot.setTargeting('label', adData.label + '_' + adData.site + '-' + adCount);
      googletag.display(adData.id); // This is for ad performance tracking with GTM in order to get a baseline measurement for prebid on lazy loaded ads
      // We are setting these variables on the window so that a GTM pixel can capture the values and track first ad load time

      googletag.pubads().addEventListener('slotOnload', function () {
        if (!$window.NYM.analytics.firstAdLoadTime) {
          $window.NYM.analytics.firstAdLoadTime = $window.performance.now();
          $window.NYM.analytics.firstAdLoadLabel = ad.data.label;
        }
      }); // A9 relies on disableInitialLoad(), which subsequently
      // requires refresh() to be called on each ad to activate.
      // For proper ad loading, refresh should be run without changing correlators
      // (to enable DFP roadblocks), and should only be run after prebid has finished
      // (to prevent ads from being refreshed multiple times in quick succession)

      if (window.apstag && window.apstag.cleared) {
        adUnits = getAdUnits();
        window.apstag.fetchBids({
          slots: adUnits,
          timeout: window.apstag.timeout
        }, function () {
          googletag.cmd.push(function () {
            window.apstag.setDisplayBids();
            googletag.pubads().refresh([slot], {
              changeCorrelator: false
            });
          });
        });
      }

      ad.slot = slot; // now that we have a slot for this ad, attach it

      return ad;
    } else {
      return ad; // allow the ad data to be put into units (without a slot)
    }
  };
  /**
   * constructor function for ad instances
   * @param {Element} el passed in from adService.create()
   */


  AdInstance = function AdInstance(el) {
    var sizes,
        w,
        h,
        id = 'ad-' + $cid(),
        name = el.getAttribute('data-name'),
        dataSizes = el.getAttribute('data-sizes'),
        dataLabel = el.getAttribute('data-label'),
        dataSite = el.getAttribute('data-site');
    id = el.id; // Sizes from data-sizes attribute.

    if (dataSizes && dataSizes.length) {
      dataSizes = dataSizes.split(',');
      sizes = []; // make this an array, so we can start pushing sizes

      _map(dataSizes, function (size) {
        size = size.split('x');
        w = parseInt(size[0]);
        h = parseInt(size[1]);
        sizes.push([w, h]);
      });
    } else {
      // Height of oop ads is 0 so that we can put it at the top of page.
      el.classList.add('oop');
      sizes = false; // legacy code
    } // put together all the data


    this.data = {
      id: id,
      name: name,
      sizes: sizes,
      loaded: false,
      label: dataLabel,
      site: dataSite
    }; // add it to the 'units' hashmap)

    units[id] = this;
  };
  /**
    * adds the ad to `googletag.cmd` array of ads
    * calls `loadIndividualAd`
    * adds ad unit to `units` hashmap of ad units.
    * @param  {{}} ad
  */


  loadAd = function loadAd(ad) {
    googletag.cmd.push(function cmdLoad() {
      var slottedAd = loadIndividualAd(ad);
      units[ad.data.id] = slottedAd;
    });
  };
  /**
   * if the ad is an active slot, use GPT `refresh` to refresh ad slot, if not call `loadAd`
   * @param {{}} adData
   */


  refreshAd = function refreshAd(adData) {
    var adUnits = [];

    if (adData.slot) {
      // fetch bids again before ad refresh
      adUnits = getAdUnits();

      if (window.apstag && window.apstag.cleared) {
        window.apstag.fetchBids({
          slots: adUnits,
          timeout: window.apstag.timeout
        }, function () {
          googletag.cmd.push(function () {
            window.apstag.setDisplayBids();
            googletag.pubads().refresh([adData.slot], {
              changeCorrelator: false
            });
          });
        });
      }
    } else if (adData) {
      // this ad was never bugg (because it wasn't visible before). do that now.
      loadAd(adData);
    }
  };
  /**
   * Construct and pass array of keywords for DFP ad targeting based on keyword
   * @param {Array} keywordStrings
   */


  function setTargetingKeywords(keywordStrings) {
    var kw = [];

    _forEach(keywordStrings, function (keywordString) {
      _forEach(keywordString.split(','), function (keyword) {
        keyword = keyword.trim().toLowerCase().replace(/\s/g, '-').replace(/\'|\â€™/g, '');

        if (keyword.length) {
          kw.push(keyword);
        }
      });
    });

    googletag.pubads().setTargeting('kw', kw);
  } // set google ads settings


  googletag.cmd.push(function setGoogleTagSettings() {
    // Targeting is using meta keywords.
    var metaArticleTag = page.getMeta('article:tag'),
        metaAuthors = page.getMeta('author'),
        pagePn = $window.location.href,
        // add gtm keyword (temporarily) for analytics performance testing
    // this is a larry thing - need to check in with him periodically about if we can remove this yet
    gtmKeywords = function () {
      var headGtm = $document.head.querySelector('.head-gtm'),
          bodyGtm = $document.body.querySelector('.gtm');

      if (!!headGtm && headGtm.getAttribute('data-gtm') === 'top') {
        return 'gtmtop';
      } else if (!!bodyGtm && bodyGtm.getAttribute('data-gtm') === 'bottom') {
        return 'gtmbottom';
      }

      return '';
    }();

    setTargetingKeywords([metaArticleTag, metaAuthors, gtmKeywords]);
    pagePn = pagePn.slice(pagePn.lastIndexOf('/') + 1);
    googletag.pubads().setTargeting('pn', pagePn); // Automatic reloads of companion ads. This is only used for companion ads to video pre-roll.

    googletag.companionAds().setRefreshUnfilledSlots(true);
    googletag.pubads().enableAsyncRendering(); // enable all ads

    googletag.enableServices();
  });
  /**
    * load an individual ad
   * @param  {{}} adData specific ad to load
  */

  this.load = loadAd;
  /**
   * creates a new ad
   * @param  {NodeElement} el element for the ad
   * @return {{}} generated ad data
   */

  this.create = function create(el) {
    return new AdInstance(el);
  };
  /**
   * refresh ad slot
   * @param  {String} adData
   */


  this.refresh = function (adData) {
    var ad;

    if (_isString(adData)) {
      // passed it an id
      ad = this.getById(adData);
      refreshAd(ad);
    } else {
      refreshAd(adData);
    }
  };
  /**
   * remove ads if they aren't needed anymore
   * @param  {{}} adData
   */


  this.remove = function removeAd(adData) {
    // remove the ad from the dom
    var id = adData.data.id,
        el = $document.getElementById(id);
    el.innerHTML = '';
  };
  /**
   * get number of ad instances that have been loaded with the same label
   * @param {string} label ad identifier
   * @returns {integer}
   */


  this.getAdCount = function (label) {
    var n = 0,
        ad,
        keys = Object.keys(units);

    _each(keys, function (key) {
      ad = units[key];
      ad.data.loaded && ad.data.label === label && n++;
    });

    return n;
  };
  /**
   * get ad data based on its ID (only works if the ad is already in the units hashmap)
   * @param  {string} id ad identifier
   * @return {{}} generated ad data
   */


  this.getById = function getById(id) {
    return units[id];
  };
  /**
   * load ads that have been added to pageLoadQueue.
   * to support DFP targeting strategies, the order in which these ads
   * are fired is subject to an ordering scheme.
   */


  executePageLoadQueue = _debounce(function () {
    var adOrder = {
      TopLeaderboard: 1,
      // top leaderboard should always be first
      RightColTopMPU: 2,
      // top right-rail should always be second
      outOfPage: 99,
      // out of page should generally be last
      // dual takeover/leaderboard unit should also always be first
      'homepageTakeover/TopLeaderboard': 1
    },
        // sort ads by adOrder
    ads = _sortBy(pageLoadQueue, function (preloadItem) {
      var rank = adOrder[preloadItem.data.label]; // if ad rank is unspecified, default to 10

      return rank || 10;
    }); // fire off ad calls in the updated order


    _forEach(ads, function (ad) {
      if (!ad.data.sizes) {
        // if this is the out of page ad, delay it until header bidding is complete on leaderboards
        return $window.setTimeout(function () {
          loadAd(ad);
        }, 1200);
      }

      return loadAd(ad);
    });

    pageLoadQueue = []; // debounce time is currently set to 10 ms, but this threshold isn't well-defined at the moment
  }, 10);
  /**
   * add ad item to pageLoadQueue
   * pageLoadQueue contains ad unit data that are visibile on initial page load
   * @param  {object} adData
   */

  this.addToPageLoadQueue = function (adData) {
    pageLoadQueue.push(adData);
    executePageLoadQueue();
  }; // START AMAZON A9 INTEGRATION

  /**
   * disable initial load of GPT and make sure apstag object is initialized on the page
   */


  function disableInitialLoadAndMakeA9Request() {
    var isA9Loaded;
    $window.googletag.cmd = $window.googletag.cmd || [];
    $window.googletag.cmd.push(function () {
      $window.googletag.pubads().disableInitialLoad();
    }); // wait for apstag to finish loading

    isA9Loaded = $window.setInterval(function () {
      if (typeof window.apstag !== 'undefined' && window.apstag) {
        $window.clearInterval(isA9Loaded);
        isA9Loaded = null;
      }
    }, 10); // if after 500ms there is no window.apstag, clear the interval and reset dfp

    setTimeout(function () {
      if (isA9Loaded) {
        $window.clearInterval(isA9Loaded);
        $window.googletag.pubads().refresh();

        if (!window.apstag) {
          console.log('MESSAGE: Timeout for A9 load exceeded, aborting');
        }
      }
    }, 500);
  } // **
  //  * determine available ad units and assign a unique prebid placement to each
  //  * @returns {Array}
  //  *


  function getAdUnits() {
    var dfpAds = document.querySelectorAll('[data-name^="/4088/"]');
    var adUnits = [],
        permittedAdSizes = [[970, 250], [970, 90], [728, 90], [300, 600], [300, 250], [320, 100], [320, 50]];

    _forEach(dfpAds, function (ad) {
      var sizesString = ad.dataset.sizes,
          sizesArr = sizesString.split(',').map(function (size) {
        if (size) {
          return size.split('x').map(function (dimension) {
            return parseInt(dimension);
          });
        } else {
          return [1, 1]; // undefined size means 1x1 out-of-page
        }
      }); // strip out ad sizes that aren't specified in permittedAdSizes

      _remove(sizesArr, function (size) {
        return undefined === _find(permittedAdSizes, function (o) {
          return _isEqual(o, size);
        });
      });

      if (sizesArr.length > 0) {
        adUnits.push({
          slotID: ad.id,
          sizes: sizesArr,
          slotName: ad.dataset.label
        });
      }
    });

    return adUnits;
  }
}]);
}, {"27":27,"31":31,"37":37,"71":71,"102":102,"107":107,"116":116,"164":164,"167":167,"213":213,"216":216}];
